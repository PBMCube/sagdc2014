(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
module.exports = function (point, vs) {
    // ray-casting algorithm based on
    // http://www.ecse.rpi.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html
    
    var x = point[0], y = point[1];
    
    var inside = false;
    for (var i = 0, j = vs.length - 1; i < vs.length; j = i++) {
        var xi = vs[i][0], yi = vs[i][1];
        var xj = vs[j][0], yj = vs[j][1];
        
        var intersect = ((yi > y) != (yj > y))
            && (x < (xj - xi) * (y - yi) / (yj - yi) + xi);
        if (intersect) inside = !inside;
    }
    
    return inside;
};

},{}],2:[function(require,module,exports){
//This is for making useful objects out of tiled objects

var ClickablePolygon = require('./clickable_polygon');
var ClickableSprite = require('./clickable_sprite');
var Utils = require('../utils');

var Clickable = function(game, tiledObj) {
    if(tiledObj.polygon) {
        ClickablePolygon.call(this, game, tiledObj)
    } else {
        ClickableSprite.call(this, game, tiledObj)
    }

    this.name = tiledObj.name;

    Utils.extend(this, tiledObj.properties);
}

Clickable.prototype.click = function(cursor, state) {
    try {
        this.onClick(cursor, state);
    } catch(err) {
        console.log(this.name, 'onClick');
    }
};

Clickable.prototype.onClick = function(options) {
    throw 'not implemented'
};

module.exports = Clickable;

},{"../utils":20,"./clickable_polygon":4,"./clickable_sprite":5}],3:[function(require,module,exports){
/*
This serves as a registry so the game_screen can automatically make objects
out of what it finds in the Tiled maps.
*/

var clickables = {
    Door: require('./door'),
    Floor: require('./floor'),
    LightSwitch: require('./light_switch'),
};

module.exports.create = function(game, tiledObj) {
    try {
        if(!tiledObj.properties.class) { tiledObj.properties.class = tiledObj.name; }
        var klass = tiledObj.properties.class;
        if(clickables[klass]) {
            return new clickables[klass](game, tiledObj);
        } else {
            throw 'clickable undefined';
        }
    } catch(err) {
        console.log(err + ': ', tiledObj.name);
        return undefined;
    }
};

},{"./door":7,"./floor":8,"./light_switch":9}],4:[function(require,module,exports){
//This is a mixin for making useful objects from tiled polygons

var inside = require('point-in-polygon');

Polygon = function(game, tiledObj) {
    //The polygon is stored with the first point at 0,0 so we have to position it
    this.polygon = translate(tiledObj.x, tiledObj.y, tiledObj.polygon);
    this.includesPoint = function(x, y) {
        return inside([x, y], this.polygon);
    };
};

var translate = function(x, y, polygon) {
    var poly = polygon.slice(0);
	for(i in poly) {
		var vertex = poly[i];
		vertex[0] += x;
		vertex[1] += y;
	};
    return poly;
};

module.exports = Polygon;

},{"point-in-polygon":1}],5:[function(require,module,exports){
//This is a mixin for making Phaser sprites from Tiled objects

var Utils = require('../utils');

var ClickableSprite = function(game, tiledObj) {
    this.x = tiledObj.x;
    this.y = tiledObj.y;

    Utils.extend(this, Object.create(Phaser.Sprite.prototype));
	Phaser.Sprite.call(this, game, tiledObj.x, tiledObj.y, 'light_switch');
	game.add.existing(this);

    var bounds = this.getBounds();
    bounds.offset(this.x, this.y);
    this.includesPoint = function(x, y) {
        return (
            x >= bounds.x &&
            x <= bounds.x + bounds.width &&
            y >= bounds.y &&
            y <= bounds.y + bounds.height
        )
    };
    this.update = function() {};
};

module.exports = ClickableSprite;

},{"../utils":20}],6:[function(require,module,exports){

CursorText = function(game) {
    this.cursor = game.input.mousePointer;
    this.offset = 20;

    var style = { 
        font: "17px Arial",
        fill: "#fff",
        align: "center",
        strokeThickness: 2
    };
    this.text = game.add.text(this.cursor.x, this.cursor.y, '', style);
    this.text.update = updatePosition(this.cursor, this.offset);
    this.timer = game.time.create(false);
}


CursorText.prototype.startMessage = function(message, time) {
    time = time || 1000;
    this.text.text = message;
    if (this.timer.running) {
        this.timer.stop();
    }
    this.timer.add(time, this.endMessage, this);
    this.timer.start();
};
CursorText.prototype.endMessage = function() {
    this.text.text = '';
    this.timer.stop();
};
var updatePosition = function(cursor, offset) {
   return function() {
       this.position.x = cursor.x + offset;
       this.position.y = cursor.y - offset;
   }
};


module.exports = CursorText;


},{}],7:[function(require,module,exports){
Clickable = require('./clickable');

Door = function(game, tiledObj) {
    Clickable.call(this, game, tiledObj);
}
Door.prototype = Object.create(Clickable.prototype);

Door.prototype.onClick = function(cursor, state) {
    var target = state.points[this.target];
    state.player.moveTo(target.x, target.y, function() {
        if(target.properties.nextSpawnPoint) {
            playerState.spawnPoint = target.properties.nextSpawnPoint;
        }
        state.game.state.start(target.properties.destination);
    });	
}

module.exports = Door;

},{"./clickable":2}],8:[function(require,module,exports){
Clickable = require('./clickable');

Floor = function(game, tiledObj) {
    Clickable.call(this, game, tiledObj);
}
Floor.prototype = Object.create(Clickable.prototype);

Floor.prototype.onClick = function(cursor, state) {
    state.player.moveTo(cursor.x, cursor.y);	
}

module.exports = Floor;

},{"./clickable":2}],9:[function(require,module,exports){
Clickable = require('./clickable');

LightSwitch = function(game, tiledObj) {
    Clickable.call(this, game, tiledObj);
}
LightSwitch.prototype = Object.create(Clickable.prototype);

LightSwitch.prototype.onClick = function(cursor, state) {
    console.log('LIGHT SWITCH');
    image.events.onInputOver.add(over, this);
    image.events.onInputOut.add(out, this);
}

module.exports = LightSwitch;

},{"./clickable":2}],10:[function(require,module,exports){
var Player = function (game, x, y) {
	Phaser.Sprite.call(this, game, x, y, 'happy-man');
	game.add.existing(this);

	this.movement;
	this.anchor.setTo(0.5, 0.95);
		
};

Player.prototype = Object.create(Phaser.Sprite.prototype);
Player.prototype.constructor = Player;

/**
 * Automatically called by World.update
 */
Player.prototype.update = function() {
};

Player.prototype.moveTo = function(x, y, done) {
	if (this.movement && this.movement.isRunning) {
		this.movement.stop();
	}

	var duration = (this.game.physics.arcade.distanceToXY(this, x, y) / 300) * 1000;
	this.movement = this.game.add.tween(this)
		.to({ x: x, y: y }, duration, Phaser.Easing.Linear.None, true);
	if(done) {
		this.movement.onComplete.add(done, this);
	}
};

module.exports = Player;

},{}],11:[function(require,module,exports){
'use strict';

var game = new Phaser.Game(1024, 768, Phaser.AUTO, 'sagdc-game');

window.Utils = require('./utils');
window.playerState = {
    UUID: '',
    inventory: [], // List of Item
    currentlyEquipped: null, // Item
    currentLevel: 'BlueRoom'
}

if (Utils.localStorageSupported()) {
     if (localStorage['playerState'] !== undefined) {
        playerState = Utils.getObject('playerState');
    } else {
        playerState.UUID = Utils.generateUUID();   
        Utils.setObject('playerState', playerState);
    }
} else {
    alert("Local storage not supported - you cannot save!");
}

game.state.add('Boot', require('./states/boot'));
game.state.add('Splash', require('./states/splash'));
game.state.add('Preloader', require('./states/preloader'));
game.state.add('Menu', require('./states/menu'));
game.state.add('Game', require('./states/game'));
game.state.add('BlueRoom', require('./states/blue_test_room'));
game.state.add('RedRoom', require('./states/red_test_room'));

game.state.start('Boot');

},{"./states/blue_test_room":12,"./states/boot":13,"./states/game":14,"./states/menu":16,"./states/preloader":17,"./states/red_test_room":18,"./states/splash":19,"./utils":20}],12:[function(require,module,exports){
var GameScreen = require('../states/game_screen');

var BlueRoom = function() {
    this.map = null;
};

BlueRoom.prototype = new GameScreen();
BlueRoom.prototype.create = function() {
    playerState.currentLevel = 'BlueRoom';

    var bg = this.game.add.image(0, 0, 'blue_room');

    this.map = this.game.add.tilemap('blue_room');

    this.initScreen();

    //overriding the default behavior of the lightSwitch
    this.clickables.lightSwitch.onClick = function(cursor, state){
        var player = state.player;
        player.moveTo(this.x, this.y + (player.height / 2), function() {
            console.log('LIGHTS OUT, MOTHERFUCKER');
        });
    };
};

module.exports = BlueRoom;

},{"../states/game_screen":15}],13:[function(require,module,exports){
var Boot = function () {};

module.exports = Boot;

Boot.prototype = {

  preload: function () {
    this.load.image('preloader', 'assets/preloader.gif');
  },

  create: function () {
    this.game.input.maxPointers = 1;

    if (this.game.device.desktop) {
      this.game.stage.scale.pageAlignHorizontally = true;
    } else {
      this.game.stage.scaleMode = Phaser.StageScaleMode.SHOW_ALL;
      this.game.stage.scale.minWidth =  480;
      this.game.stage.scale.minHeight = 260;
      this.game.stage.scale.maxWidth = 640;
      this.game.stage.scale.maxHeight = 480;
      this.game.stage.scale.forceLandscape = true;
      this.game.stage.scale.pageAlignHorizontally = true;
      this.game.stage.scale.setScreenSize(true);
    }

    this.game.state.start('Preloader');
  }
};

},{}],14:[function(require,module,exports){
var Player = require('../entities/player');

var Game = function () {
  this.testentity = null;
};

module.exports = Game;

Game.prototype = {

  create: function () {
    var x = (this.game.width / 2) - 100;
    var y = (this.game.height / 2) - 50;

    this.testentity = new Player(this.game, x, y);
    this.testentity.anchor.setTo(0.5, 0.5);

    this.input.onDown.add(this.onInputDown, this);
  },

  update: function () {
    var x, y, cx, cy, dx, dy, angle, scale;

    x = this.input.position.x;
    y = this.input.position.y;
    cx = this.world.centerX;
    cy = this.world.centerY;

    angle = Math.atan2(y - cy, x - cx) * (180 / Math.PI);
    this.testentity.angle = angle;

    dx = x - cx;
    dy = y - cy;
    scale = Math.sqrt(dx * dx + dy * dy) / 100;

    this.testentity.scale.x = scale * 0.6;
    this.testentity.scale.y = scale * 0.6;
  },

  onInputDown: function () {
    this.game.state.start('Menu');
  }
};

},{"../entities/player":10}],15:[function(require,module,exports){
//main game screen that the various scenes will inherit

var Player = require('../entities/player');
var ClickableMaker = require('../entities/clickable_maker');
var CursorText = require('../entities/cursor_text');

var GameScreen = function() {
    this.player = null;
};

GameScreen.prototype = {
    initScreen: function() {
        this.points = this.extractPointsFromTileMapLayer(this.map.objects.points);
        this.clickables = this.extractClickablesFromTileMapLayer(this.map.objects.clickables);

        this.cursorText = new CursorText(this.game);

        if(playerState.spawnPoint && this.points[playerState.spawnPoint]) {
            var point = this.points[playerState.spawnPoint];
            var x = point.x;
            var y = point.y;
        } else {
            var x = (this.game.width / 2);
            var y = (this.game.height / 2) + 250;
        }
        this.player = new Player(this.game, x, y);

        this.input.onDown.add(this.clickClickables, this);
    },

    update: function () {
    },

    clickClickables: function(cursor) {
        for(i in this.clickables) {
            var clickable = this.clickables[i];
            if(clickable.includesPoint(cursor.x, cursor.y)) {
                clickable.click(cursor, this);
            }
        }
    },

    extractPointsFromTileMapLayer: function(layer) {
        var points = {};
        for(i in layer) {
            point = layer[i];
            points[point.name] = point;
        }
        return points;
    },

    extractClickablesFromTileMapLayer: function(layer) {
        var clickables = {};
        for(i in layer) {
            var clickable = ClickableMaker.create(this.game, layer[i]);
            if(clickable) { clickables[clickable.name] = clickable; }
        }
        return clickables;
    },

    update: function() {
        for(i in this.clickables) {
            var clickable = this.clickables[i];
            
            checkClickableHover(clickable, this.game.input.mousePointer, this.cursorText);
        }
    }
};

var checkClickableHover = function(clickable, cursor, cursorText) {
    if(clickable.hoverText && clickable.includesPoint(cursor.x, cursor.y)) {
        cursorText.startMessage(clickable.hoverText); 
    }
};

module.exports = GameScreen;

},{"../entities/clickable_maker":3,"../entities/cursor_text":6,"../entities/player":10}],16:[function(require,module,exports){
var Menu = function () {
  this.text = null;
};

module.exports = Menu;

Menu.prototype = {

  create: function () {
    var x = this.game.width / 2;
    var y = this.game.height / 2;

    var style = { font: "65px Arial", fill: "#ffffff", align: "center" };

    this.text = this.add.text(x - 300, y - 200, "Press to Start", style);

    this.input.onDown.add(this.onDown, this);
  },

  update: function () {
  },

  onDown: function () {
    this.game.state.start(playerState.currentLevel);
  }
};

},{}],17:[function(require,module,exports){
var Preloader = function (game) {
  this.asset = null;
  this.ready = false;
};

module.exports = Preloader;

Preloader.prototype = {

  preload: function () {
    this.asset = this.add.sprite(320, 240, 'preloader');
    this.asset.anchor.setTo(0.5, 0.5);

    this.load.onLoadComplete.addOnce(this.onLoadComplete, this);
    this.load.setPreloadSprite(this.asset);
    this.load.image('testsprite', 'assets/test.png');
    this.load.image('happy-man', 'assets/happy-man.png');
    this.load.tilemap('blue_room', 'assets/tilemaps/blue_room.json', null, Phaser.Tilemap.TILED_JSON);
    this.load.tilemap('red_room', 'assets/tilemaps/red_room.json', null, Phaser.Tilemap.TILED_JSON);
    this.load.image('blue_room', 'assets/test_bg_blue.jpg');
    this.load.image('red_room', 'assets/test_bg_red.jpg');
    this.load.spritesheet('light_switch', 'assets/light_switch.png', 32, 32);
  },

  create: function () {
    this.asset.cropEnabled = false;
  },

  update: function () {
    if (!!this.ready) {
      this.game.state.start('Menu');
    }
  },

  onLoadComplete: function () {
    this.ready = true;
  }
};

},{}],18:[function(require,module,exports){
var GameScreen = require('../states/game_screen');

var RedRoom = function() {
	this.map = null;
};

RedRoom.prototype = new GameScreen();
RedRoom.prototype.create = function() {
	playerState.currentLevel = 'RedRoom';

	var bg = this.game.add.image(0, 0, 'red_room');

	this.map = this.game.add.tilemap('red_room');

	this.initScreen();
};

module.exports = RedRoom;

},{"../states/game_screen":15}],19:[function(require,module,exports){
var Splash = function () {
};

module.exports = Splash;

Splash.prototype = {
  create: function () {
  }
};
},{}],20:[function(require,module,exports){
var Utils = {
    containsObject: function(obj, list) {
        var i;
        for (i = 0; i < list.length; i++) {
            if (list[i] === obj) {
                return true;
            }
        }

        return false;
    },

    localStorageSupported: function() {
        try {
            return 'localStorage' in window && window['localStorage'] !== null;
        } catch (e) {
            return false;
        }
    },

    generateUUID: function(){
        var d = Date.now();
        var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
            var r = (d + Math.random()*16)%16 | 0;
            d = Math.floor(d/16);
            return (c=='x' ? r : (r&0x7|0x8)).toString(16);
        });
        return uuid;
    },

    getObject: function(key, value) {
        var value = localStorage.getItem(key);
        return value && JSON.parse(value);
    },

    setObject: function(key, value) {
        localStorage.setItem(key, JSON.stringify(value));
    },

    extend: function (target, other) {
      for (var prop in other) {
        if (typeof other[prop] === 'object') {
          target[prop] = extend(target[prop], other[prop]);
        } else {
          target[prop] = other[prop];
        }
      }
      return target;
    }
};

module.exports = Utils;

},{}]},{},[11])
//# sourceMappingURL=data:application/json;base64,
