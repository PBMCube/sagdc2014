(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
module.exports = function (point, vs) {
    // ray-casting algorithm based on
    // http://www.ecse.rpi.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html
    
    var x = point[0], y = point[1];
    
    var inside = false;
    for (var i = 0, j = vs.length - 1; i < vs.length; j = i++) {
        var xi = vs[i][0], yi = vs[i][1];
        var xj = vs[j][0], yj = vs[j][1];
        
        var intersect = ((yi > y) != (yj > y))
            && (x < (xj - xi) * (y - yi) / (yj - yi) + xi);
        if (intersect) inside = !inside;
    }
    
    return inside;
};

},{}],2:[function(require,module,exports){
var inside = require('point-in-polygon');

var ClickablePolygon = function(polyObject) {
    this.name = polyObject.name;

    //The polygon is stored with the first point at 0,0 so we have to position it
    this.polygon = translate(polyObject.x, polyObject.y, polyObject.polygon);
}

ClickablePolygon.prototype.includesPoint = function(x, y) {
    return inside([x, y], this.polygon);
};

var translate = function(x, y, polygon) {
    var poly = polygon.slice(0);
	for(i in poly) {
		var vertex = poly[i];
		vertex[0] += x;
		vertex[1] += y;
	};
    return poly;
};

module.exports = ClickablePolygon;

},{"point-in-polygon":1}],3:[function(require,module,exports){
var Player = function (game, x, y) {
	Phaser.Sprite.call(this, game, x, y, 'happy-man');
	game.add.existing(this);

	this.tween;
	this.anchor.setTo(0.5, 0.95);
		
};

Player.prototype = Object.create(Phaser.Sprite.prototype);
Player.prototype.constructor = Player;

/**
 * Automatically called by World.update
 */
Player.prototype.update = function() {
};

Player.prototype.moveTo = function(x, y, done) {
	console.log(x, y);
	if (this.tween && this.tween.isRunning) {
		this.tween.stop();
	}

	var duration = (this.game.physics.arcade.distanceToXY(this, x, y) / 300) * 1000;
	this.tween = this.game.add.tween(this)
		.to({ x: x, y: y }, duration, Phaser.Easing.Linear.None, true);
	if(done) {
		this.tween.onComplete.add(done, this);
	}
};

module.exports = Player;

},{}],4:[function(require,module,exports){
'use strict';

var game = new Phaser.Game(1024, 768, Phaser.AUTO, 'sagdc-game');

window.Utils = require('./utils');
window.playerState = {
    UUID: '',
    inventory: [], // List of Item
    currentlyEquipped: null, // Item
    currentLevel: 'BlueRoom'
}

if (Utils.localStorageSupported()) {
     if (localStorage['playerState'] !== undefined) {
        playerState = Utils.getObject('playerState');
    } else {
        playerState.UUID = Utils.generateUUID();   
        Utils.setObject('playerState', playerState);
    }
} else {
    alert("Local storage not supported - you cannot save!");
}

game.state.add('Boot', require('./states/boot'));
game.state.add('Splash', require('./states/splash'));
game.state.add('Preloader', require('./states/preloader'));
game.state.add('Menu', require('./states/menu'));
game.state.add('Game', require('./states/game'));
game.state.add('BlueRoom', require('./states/blue_test_room'));
game.state.add('RedRoom', require('./states/red_test_room'));

game.state.start('Boot');

},{"./states/blue_test_room":5,"./states/boot":6,"./states/game":7,"./states/menu":8,"./states/preloader":9,"./states/red_test_room":10,"./states/splash":11,"./utils":12}],5:[function(require,module,exports){
var Player = require('../entities/player');
var ClickablePolygon = require('../entities/clickable_polygon');

var BlueRoom = function () {
  this.player = null;
};

BlueRoom.prototype = {

  create: function () {
		playerState.currentLevel = 'BlueRoom';
		var bg = this.game.add.image(0, 0, 'blue_room');

    var map = this.game.add.tilemap('blue_room');
		var mapBg = map.createLayer('bg');
		this.polygons = extractPolygonsFromTileMapLayer(map.objects.polygons);

    var x = (this.game.width / 2);
    var y = (this.game.height / 2) + 250;

    this.player = new Player(this.game, x, y);

    this.input.onDown.add(this.onInputDown, this);
  },

  onInputDown: function (cursor) {
		var x = cursor.x,
			 y = cursor.y;
		for(i in this.polygons) {
			var polygon = this.polygons[i];
			if(polygon.includesPoint(x, y)) {
				if(polygon.name == 'floor') {
					return this.player.moveTo(x, y);	
				}
				if(polygon.name == 'door') {
					return this.player.moveTo(x, this.player.y, function() {
						this.game.state.start('RedRoom');
					});	
				}
			}
		}
  }
};


var extractPolygonsFromTileMapLayer = function(layer) {
	var polys = [];
	for(i in layer) {
		polys.push(new ClickablePolygon(layer[i]));
	}
	return polys;
};

module.exports = BlueRoom;

},{"../entities/clickable_polygon":2,"../entities/player":3}],6:[function(require,module,exports){
var Boot = function () {};

module.exports = Boot;

Boot.prototype = {

  preload: function () {
    this.load.image('preloader', 'assets/preloader.gif');
  },

  create: function () {
    this.game.input.maxPointers = 1;

    if (this.game.device.desktop) {
      this.game.stage.scale.pageAlignHorizontally = true;
    } else {
      this.game.stage.scaleMode = Phaser.StageScaleMode.SHOW_ALL;
      this.game.stage.scale.minWidth =  480;
      this.game.stage.scale.minHeight = 260;
      this.game.stage.scale.maxWidth = 640;
      this.game.stage.scale.maxHeight = 480;
      this.game.stage.scale.forceLandscape = true;
      this.game.stage.scale.pageAlignHorizontally = true;
      this.game.stage.scale.setScreenSize(true);
    }

    this.game.state.start('Preloader');
  }
};

},{}],7:[function(require,module,exports){
var Player = require('../entities/player');

var Game = function () {
  this.testentity = null;
};

module.exports = Game;

Game.prototype = {

  create: function () {
    var x = (this.game.width / 2) - 100;
    var y = (this.game.height / 2) - 50;

    this.testentity = new Player(this.game, x, y);
    this.testentity.anchor.setTo(0.5, 0.5);

    this.input.onDown.add(this.onInputDown, this);
  },

  update: function () {
    var x, y, cx, cy, dx, dy, angle, scale;

    x = this.input.position.x;
    y = this.input.position.y;
    cx = this.world.centerX;
    cy = this.world.centerY;

    angle = Math.atan2(y - cy, x - cx) * (180 / Math.PI);
    this.testentity.angle = angle;

    dx = x - cx;
    dy = y - cy;
    scale = Math.sqrt(dx * dx + dy * dy) / 100;

    this.testentity.scale.x = scale * 0.6;
    this.testentity.scale.y = scale * 0.6;
  },

  onInputDown: function () {
    this.game.state.start('Menu');
  }
};

},{"../entities/player":3}],8:[function(require,module,exports){
var Menu = function () {
  this.text = null;
};

module.exports = Menu;

Menu.prototype = {

  create: function () {
    var x = this.game.width / 2;
    var y = this.game.height / 2;

    var style = { font: "65px Arial", fill: "#ffffff", align: "center" };

    this.text = this.add.text(x - 300, y - 200, "Press to Start", style);

    this.input.onDown.add(this.onDown, this);
  },

  update: function () {
  },

  onDown: function () {
    this.game.state.start(playerState.currentLevel);
  }
};

},{}],9:[function(require,module,exports){
var Preloader = function (game) {
  this.asset = null;
  this.ready = false;
};

module.exports = Preloader;

Preloader.prototype = {

  preload: function () {
    this.asset = this.add.sprite(320, 240, 'preloader');
    this.asset.anchor.setTo(0.5, 0.5);

    this.load.onLoadComplete.addOnce(this.onLoadComplete, this);
    this.load.setPreloadSprite(this.asset);
    this.load.image('testsprite', 'assets/test.png');
    this.load.image('happy-man', 'assets/happy-man.png');
    this.load.tilemap('blue_room', 'assets/tilemaps/blue_room.json', null, Phaser.Tilemap.TILED_JSON);
    this.load.tilemap('red_room', 'assets/tilemaps/red_room.json', null, Phaser.Tilemap.TILED_JSON);
    this.load.image('blue_room', 'assets/test_bg_blue.jpg');
    this.load.image('red_room', 'assets/test_bg_red.jpg');
  },

  create: function () {
    this.asset.cropEnabled = false;
  },

  update: function () {
    if (!!this.ready) {
      this.game.state.start('Menu');
    }
  },

  onLoadComplete: function () {
    this.ready = true;
  }
};

},{}],10:[function(require,module,exports){
var Player = require('../entities/player');
var ClickablePolygon = require('../entities/clickable_polygon');

var RedRoom = function () {
  this.player = null;
};

module.exports = RedRoom;

RedRoom.prototype = {

  create: function () {
		playerState.currentLevel = 'RedRoom';

		var bg = this.game.add.image(0, 0, 'red_room');

    var map = this.game.add.tilemap('red_room');
		this.polygons = extractPolygonsFromTileMapLayer(map.objects.polygons);

    var x = (this.game.width / 2);
    var y = (this.game.height / 2) + 250;

    this.player = new Player(this.game, x, y);

    this.input.onDown.add(this.onInputDown, this);
  },

  update: function () {
  },

  onInputDown: function (cursor) {
		var x = cursor.x,
			 y = cursor.y;
		for(i in this.polygons) {
			var polygon = this.polygons[i];
			if(polygon.includesPoint(x, y)) {
				if(polygon.name == 'floor') {
					return this.player.moveTo(x, y);	
				}
				if(polygon.name == 'door') {
					return this.player.moveTo(x, this.player.y, function() {
						this.game.state.start('BlueRoom');
					});	
				}
			}
		}
  }
};


var extractPolygonsFromTileMapLayer = function(layer) {
	var polys = [];
	for(i in layer) {
		polys.push(new ClickablePolygon(layer[i]));
	}
	return polys;
};

},{"../entities/clickable_polygon":2,"../entities/player":3}],11:[function(require,module,exports){
var Splash = function () {
};

module.exports = Splash;

Splash.prototype = {
  create: function () {
  }
};
},{}],12:[function(require,module,exports){
var Utils = {
    containsObject: function(obj, list) {
        var i;
        for (i = 0; i < list.length; i++) {
            if (list[i] === obj) {
                return true;
            }
        }

        return false;
    },

    localStorageSupported: function() {
        try {
            return 'localStorage' in window && window['localStorage'] !== null;
        } catch (e) {
            return false;
        }
    },

    generateUUID: function(){
        var d = Date.now();
        var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
            var r = (d + Math.random()*16)%16 | 0;
            d = Math.floor(d/16);
            return (c=='x' ? r : (r&0x7|0x8)).toString(16);
        });
        return uuid;
    },

    getObject: function(key, value) {
        var value = localStorage.getItem(key);
        return value && JSON.parse(value);
    },

    setObject: function(key, value) {
        localStorage.setItem(key, JSON.stringify(value));
    }
};

module.exports = Utils;
},{}]},{},[4])
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlcyI6WyIvaG9tZS9ib3Jlbi9zcmMvc2FnZGMyMDE0L25vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCIvaG9tZS9ib3Jlbi9zcmMvc2FnZGMyMDE0L25vZGVfbW9kdWxlcy9wb2ludC1pbi1wb2x5Z29uL2luZGV4LmpzIiwiL2hvbWUvYm9yZW4vc3JjL3NhZ2RjMjAxNC9zcmMvanMvZW50aXRpZXMvY2xpY2thYmxlX3BvbHlnb24uanMiLCIvaG9tZS9ib3Jlbi9zcmMvc2FnZGMyMDE0L3NyYy9qcy9lbnRpdGllcy9wbGF5ZXIuanMiLCIvaG9tZS9ib3Jlbi9zcmMvc2FnZGMyMDE0L3NyYy9qcy9tYWluLmpzIiwiL2hvbWUvYm9yZW4vc3JjL3NhZ2RjMjAxNC9zcmMvanMvc3RhdGVzL2JsdWVfdGVzdF9yb29tLmpzIiwiL2hvbWUvYm9yZW4vc3JjL3NhZ2RjMjAxNC9zcmMvanMvc3RhdGVzL2Jvb3QuanMiLCIvaG9tZS9ib3Jlbi9zcmMvc2FnZGMyMDE0L3NyYy9qcy9zdGF0ZXMvZ2FtZS5qcyIsIi9ob21lL2JvcmVuL3NyYy9zYWdkYzIwMTQvc3JjL2pzL3N0YXRlcy9tZW51LmpzIiwiL2hvbWUvYm9yZW4vc3JjL3NhZ2RjMjAxNC9zcmMvanMvc3RhdGVzL3ByZWxvYWRlci5qcyIsIi9ob21lL2JvcmVuL3NyYy9zYWdkYzIwMTQvc3JjL2pzL3N0YXRlcy9yZWRfdGVzdF9yb29tLmpzIiwiL2hvbWUvYm9yZW4vc3JjL3NhZ2RjMjAxNC9zcmMvanMvc3RhdGVzL3NwbGFzaC5qcyIsIi9ob21lL2JvcmVuL3NyYy9zYWdkYzIwMTQvc3JjL2pzL3V0aWxzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FDQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3hCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNqQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2hDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN0REE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzdCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzNDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDMUJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDckNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3pEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKX12YXIgZj1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwoZi5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxmLGYuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAocG9pbnQsIHZzKSB7XG4gICAgLy8gcmF5LWNhc3RpbmcgYWxnb3JpdGhtIGJhc2VkIG9uXG4gICAgLy8gaHR0cDovL3d3dy5lY3NlLnJwaS5lZHUvSG9tZXBhZ2VzL3dyZi9SZXNlYXJjaC9TaG9ydF9Ob3Rlcy9wbnBvbHkuaHRtbFxuICAgIFxuICAgIHZhciB4ID0gcG9pbnRbMF0sIHkgPSBwb2ludFsxXTtcbiAgICBcbiAgICB2YXIgaW5zaWRlID0gZmFsc2U7XG4gICAgZm9yICh2YXIgaSA9IDAsIGogPSB2cy5sZW5ndGggLSAxOyBpIDwgdnMubGVuZ3RoOyBqID0gaSsrKSB7XG4gICAgICAgIHZhciB4aSA9IHZzW2ldWzBdLCB5aSA9IHZzW2ldWzFdO1xuICAgICAgICB2YXIgeGogPSB2c1tqXVswXSwgeWogPSB2c1tqXVsxXTtcbiAgICAgICAgXG4gICAgICAgIHZhciBpbnRlcnNlY3QgPSAoKHlpID4geSkgIT0gKHlqID4geSkpXG4gICAgICAgICAgICAmJiAoeCA8ICh4aiAtIHhpKSAqICh5IC0geWkpIC8gKHlqIC0geWkpICsgeGkpO1xuICAgICAgICBpZiAoaW50ZXJzZWN0KSBpbnNpZGUgPSAhaW5zaWRlO1xuICAgIH1cbiAgICBcbiAgICByZXR1cm4gaW5zaWRlO1xufTtcbiIsInZhciBpbnNpZGUgPSByZXF1aXJlKCdwb2ludC1pbi1wb2x5Z29uJyk7XG5cbnZhciBDbGlja2FibGVQb2x5Z29uID0gZnVuY3Rpb24ocG9seU9iamVjdCkge1xuICAgIHRoaXMubmFtZSA9IHBvbHlPYmplY3QubmFtZTtcblxuICAgIC8vVGhlIHBvbHlnb24gaXMgc3RvcmVkIHdpdGggdGhlIGZpcnN0IHBvaW50IGF0IDAsMCBzbyB3ZSBoYXZlIHRvIHBvc2l0aW9uIGl0XG4gICAgdGhpcy5wb2x5Z29uID0gdHJhbnNsYXRlKHBvbHlPYmplY3QueCwgcG9seU9iamVjdC55LCBwb2x5T2JqZWN0LnBvbHlnb24pO1xufVxuXG5DbGlja2FibGVQb2x5Z29uLnByb3RvdHlwZS5pbmNsdWRlc1BvaW50ID0gZnVuY3Rpb24oeCwgeSkge1xuICAgIHJldHVybiBpbnNpZGUoW3gsIHldLCB0aGlzLnBvbHlnb24pO1xufTtcblxudmFyIHRyYW5zbGF0ZSA9IGZ1bmN0aW9uKHgsIHksIHBvbHlnb24pIHtcbiAgICB2YXIgcG9seSA9IHBvbHlnb24uc2xpY2UoMCk7XG5cdGZvcihpIGluIHBvbHkpIHtcblx0XHR2YXIgdmVydGV4ID0gcG9seVtpXTtcblx0XHR2ZXJ0ZXhbMF0gKz0geDtcblx0XHR2ZXJ0ZXhbMV0gKz0geTtcblx0fTtcbiAgICByZXR1cm4gcG9seTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQ2xpY2thYmxlUG9seWdvbjtcbiIsInZhciBQbGF5ZXIgPSBmdW5jdGlvbiAoZ2FtZSwgeCwgeSkge1xuXHRQaGFzZXIuU3ByaXRlLmNhbGwodGhpcywgZ2FtZSwgeCwgeSwgJ2hhcHB5LW1hbicpO1xuXHRnYW1lLmFkZC5leGlzdGluZyh0aGlzKTtcblxuXHR0aGlzLnR3ZWVuO1xuXHR0aGlzLmFuY2hvci5zZXRUbygwLjUsIDAuOTUpO1xuXHRcdFxufTtcblxuUGxheWVyLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoUGhhc2VyLlNwcml0ZS5wcm90b3R5cGUpO1xuUGxheWVyLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFBsYXllcjtcblxuLyoqXG4gKiBBdXRvbWF0aWNhbGx5IGNhbGxlZCBieSBXb3JsZC51cGRhdGVcbiAqL1xuUGxheWVyLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbigpIHtcbn07XG5cblBsYXllci5wcm90b3R5cGUubW92ZVRvID0gZnVuY3Rpb24oeCwgeSwgZG9uZSkge1xuXHRjb25zb2xlLmxvZyh4LCB5KTtcblx0aWYgKHRoaXMudHdlZW4gJiYgdGhpcy50d2Vlbi5pc1J1bm5pbmcpIHtcblx0XHR0aGlzLnR3ZWVuLnN0b3AoKTtcblx0fVxuXG5cdHZhciBkdXJhdGlvbiA9ICh0aGlzLmdhbWUucGh5c2ljcy5hcmNhZGUuZGlzdGFuY2VUb1hZKHRoaXMsIHgsIHkpIC8gMzAwKSAqIDEwMDA7XG5cdHRoaXMudHdlZW4gPSB0aGlzLmdhbWUuYWRkLnR3ZWVuKHRoaXMpXG5cdFx0LnRvKHsgeDogeCwgeTogeSB9LCBkdXJhdGlvbiwgUGhhc2VyLkVhc2luZy5MaW5lYXIuTm9uZSwgdHJ1ZSk7XG5cdGlmKGRvbmUpIHtcblx0XHR0aGlzLnR3ZWVuLm9uQ29tcGxldGUuYWRkKGRvbmUsIHRoaXMpO1xuXHR9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFBsYXllcjtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGdhbWUgPSBuZXcgUGhhc2VyLkdhbWUoMTAyNCwgNzY4LCBQaGFzZXIuQVVUTywgJ3NhZ2RjLWdhbWUnKTtcblxud2luZG93LlV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xud2luZG93LnBsYXllclN0YXRlID0ge1xuICAgIFVVSUQ6ICcnLFxuICAgIGludmVudG9yeTogW10sIC8vIExpc3Qgb2YgSXRlbVxuICAgIGN1cnJlbnRseUVxdWlwcGVkOiBudWxsLCAvLyBJdGVtXG4gICAgY3VycmVudExldmVsOiAnQmx1ZVJvb20nXG59XG5cbmlmIChVdGlscy5sb2NhbFN0b3JhZ2VTdXBwb3J0ZWQoKSkge1xuICAgICBpZiAobG9jYWxTdG9yYWdlWydwbGF5ZXJTdGF0ZSddICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcGxheWVyU3RhdGUgPSBVdGlscy5nZXRPYmplY3QoJ3BsYXllclN0YXRlJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcGxheWVyU3RhdGUuVVVJRCA9IFV0aWxzLmdlbmVyYXRlVVVJRCgpOyAgIFxuICAgICAgICBVdGlscy5zZXRPYmplY3QoJ3BsYXllclN0YXRlJywgcGxheWVyU3RhdGUpO1xuICAgIH1cbn0gZWxzZSB7XG4gICAgYWxlcnQoXCJMb2NhbCBzdG9yYWdlIG5vdCBzdXBwb3J0ZWQgLSB5b3UgY2Fubm90IHNhdmUhXCIpO1xufVxuXG5nYW1lLnN0YXRlLmFkZCgnQm9vdCcsIHJlcXVpcmUoJy4vc3RhdGVzL2Jvb3QnKSk7XG5nYW1lLnN0YXRlLmFkZCgnU3BsYXNoJywgcmVxdWlyZSgnLi9zdGF0ZXMvc3BsYXNoJykpO1xuZ2FtZS5zdGF0ZS5hZGQoJ1ByZWxvYWRlcicsIHJlcXVpcmUoJy4vc3RhdGVzL3ByZWxvYWRlcicpKTtcbmdhbWUuc3RhdGUuYWRkKCdNZW51JywgcmVxdWlyZSgnLi9zdGF0ZXMvbWVudScpKTtcbmdhbWUuc3RhdGUuYWRkKCdHYW1lJywgcmVxdWlyZSgnLi9zdGF0ZXMvZ2FtZScpKTtcbmdhbWUuc3RhdGUuYWRkKCdCbHVlUm9vbScsIHJlcXVpcmUoJy4vc3RhdGVzL2JsdWVfdGVzdF9yb29tJykpO1xuZ2FtZS5zdGF0ZS5hZGQoJ1JlZFJvb20nLCByZXF1aXJlKCcuL3N0YXRlcy9yZWRfdGVzdF9yb29tJykpO1xuXG5nYW1lLnN0YXRlLnN0YXJ0KCdCb290Jyk7XG4iLCJ2YXIgUGxheWVyID0gcmVxdWlyZSgnLi4vZW50aXRpZXMvcGxheWVyJyk7XG52YXIgQ2xpY2thYmxlUG9seWdvbiA9IHJlcXVpcmUoJy4uL2VudGl0aWVzL2NsaWNrYWJsZV9wb2x5Z29uJyk7XG5cbnZhciBCbHVlUm9vbSA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5wbGF5ZXIgPSBudWxsO1xufTtcblxuQmx1ZVJvb20ucHJvdG90eXBlID0ge1xuXG4gIGNyZWF0ZTogZnVuY3Rpb24gKCkge1xuXHRcdHBsYXllclN0YXRlLmN1cnJlbnRMZXZlbCA9ICdCbHVlUm9vbSc7XG5cdFx0dmFyIGJnID0gdGhpcy5nYW1lLmFkZC5pbWFnZSgwLCAwLCAnYmx1ZV9yb29tJyk7XG5cbiAgICB2YXIgbWFwID0gdGhpcy5nYW1lLmFkZC50aWxlbWFwKCdibHVlX3Jvb20nKTtcblx0XHR2YXIgbWFwQmcgPSBtYXAuY3JlYXRlTGF5ZXIoJ2JnJyk7XG5cdFx0dGhpcy5wb2x5Z29ucyA9IGV4dHJhY3RQb2x5Z29uc0Zyb21UaWxlTWFwTGF5ZXIobWFwLm9iamVjdHMucG9seWdvbnMpO1xuXG4gICAgdmFyIHggPSAodGhpcy5nYW1lLndpZHRoIC8gMik7XG4gICAgdmFyIHkgPSAodGhpcy5nYW1lLmhlaWdodCAvIDIpICsgMjUwO1xuXG4gICAgdGhpcy5wbGF5ZXIgPSBuZXcgUGxheWVyKHRoaXMuZ2FtZSwgeCwgeSk7XG5cbiAgICB0aGlzLmlucHV0Lm9uRG93bi5hZGQodGhpcy5vbklucHV0RG93biwgdGhpcyk7XG4gIH0sXG5cbiAgb25JbnB1dERvd246IGZ1bmN0aW9uIChjdXJzb3IpIHtcblx0XHR2YXIgeCA9IGN1cnNvci54LFxuXHRcdFx0IHkgPSBjdXJzb3IueTtcblx0XHRmb3IoaSBpbiB0aGlzLnBvbHlnb25zKSB7XG5cdFx0XHR2YXIgcG9seWdvbiA9IHRoaXMucG9seWdvbnNbaV07XG5cdFx0XHRpZihwb2x5Z29uLmluY2x1ZGVzUG9pbnQoeCwgeSkpIHtcblx0XHRcdFx0aWYocG9seWdvbi5uYW1lID09ICdmbG9vcicpIHtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcy5wbGF5ZXIubW92ZVRvKHgsIHkpO1x0XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYocG9seWdvbi5uYW1lID09ICdkb29yJykge1xuXHRcdFx0XHRcdHJldHVybiB0aGlzLnBsYXllci5tb3ZlVG8oeCwgdGhpcy5wbGF5ZXIueSwgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHR0aGlzLmdhbWUuc3RhdGUuc3RhcnQoJ1JlZFJvb20nKTtcblx0XHRcdFx0XHR9KTtcdFxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuICB9XG59O1xuXG5cbnZhciBleHRyYWN0UG9seWdvbnNGcm9tVGlsZU1hcExheWVyID0gZnVuY3Rpb24obGF5ZXIpIHtcblx0dmFyIHBvbHlzID0gW107XG5cdGZvcihpIGluIGxheWVyKSB7XG5cdFx0cG9seXMucHVzaChuZXcgQ2xpY2thYmxlUG9seWdvbihsYXllcltpXSkpO1xuXHR9XG5cdHJldHVybiBwb2x5cztcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQmx1ZVJvb207XG4iLCJ2YXIgQm9vdCA9IGZ1bmN0aW9uICgpIHt9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEJvb3Q7XG5cbkJvb3QucHJvdG90eXBlID0ge1xuXG4gIHByZWxvYWQ6IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmxvYWQuaW1hZ2UoJ3ByZWxvYWRlcicsICdhc3NldHMvcHJlbG9hZGVyLmdpZicpO1xuICB9LFxuXG4gIGNyZWF0ZTogZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZ2FtZS5pbnB1dC5tYXhQb2ludGVycyA9IDE7XG5cbiAgICBpZiAodGhpcy5nYW1lLmRldmljZS5kZXNrdG9wKSB7XG4gICAgICB0aGlzLmdhbWUuc3RhZ2Uuc2NhbGUucGFnZUFsaWduSG9yaXpvbnRhbGx5ID0gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5nYW1lLnN0YWdlLnNjYWxlTW9kZSA9IFBoYXNlci5TdGFnZVNjYWxlTW9kZS5TSE9XX0FMTDtcbiAgICAgIHRoaXMuZ2FtZS5zdGFnZS5zY2FsZS5taW5XaWR0aCA9ICA0ODA7XG4gICAgICB0aGlzLmdhbWUuc3RhZ2Uuc2NhbGUubWluSGVpZ2h0ID0gMjYwO1xuICAgICAgdGhpcy5nYW1lLnN0YWdlLnNjYWxlLm1heFdpZHRoID0gNjQwO1xuICAgICAgdGhpcy5nYW1lLnN0YWdlLnNjYWxlLm1heEhlaWdodCA9IDQ4MDtcbiAgICAgIHRoaXMuZ2FtZS5zdGFnZS5zY2FsZS5mb3JjZUxhbmRzY2FwZSA9IHRydWU7XG4gICAgICB0aGlzLmdhbWUuc3RhZ2Uuc2NhbGUucGFnZUFsaWduSG9yaXpvbnRhbGx5ID0gdHJ1ZTtcbiAgICAgIHRoaXMuZ2FtZS5zdGFnZS5zY2FsZS5zZXRTY3JlZW5TaXplKHRydWUpO1xuICAgIH1cblxuICAgIHRoaXMuZ2FtZS5zdGF0ZS5zdGFydCgnUHJlbG9hZGVyJyk7XG4gIH1cbn07XG4iLCJ2YXIgUGxheWVyID0gcmVxdWlyZSgnLi4vZW50aXRpZXMvcGxheWVyJyk7XG5cbnZhciBHYW1lID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLnRlc3RlbnRpdHkgPSBudWxsO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBHYW1lO1xuXG5HYW1lLnByb3RvdHlwZSA9IHtcblxuICBjcmVhdGU6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgeCA9ICh0aGlzLmdhbWUud2lkdGggLyAyKSAtIDEwMDtcbiAgICB2YXIgeSA9ICh0aGlzLmdhbWUuaGVpZ2h0IC8gMikgLSA1MDtcblxuICAgIHRoaXMudGVzdGVudGl0eSA9IG5ldyBQbGF5ZXIodGhpcy5nYW1lLCB4LCB5KTtcbiAgICB0aGlzLnRlc3RlbnRpdHkuYW5jaG9yLnNldFRvKDAuNSwgMC41KTtcblxuICAgIHRoaXMuaW5wdXQub25Eb3duLmFkZCh0aGlzLm9uSW5wdXREb3duLCB0aGlzKTtcbiAgfSxcblxuICB1cGRhdGU6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgeCwgeSwgY3gsIGN5LCBkeCwgZHksIGFuZ2xlLCBzY2FsZTtcblxuICAgIHggPSB0aGlzLmlucHV0LnBvc2l0aW9uLng7XG4gICAgeSA9IHRoaXMuaW5wdXQucG9zaXRpb24ueTtcbiAgICBjeCA9IHRoaXMud29ybGQuY2VudGVyWDtcbiAgICBjeSA9IHRoaXMud29ybGQuY2VudGVyWTtcblxuICAgIGFuZ2xlID0gTWF0aC5hdGFuMih5IC0gY3ksIHggLSBjeCkgKiAoMTgwIC8gTWF0aC5QSSk7XG4gICAgdGhpcy50ZXN0ZW50aXR5LmFuZ2xlID0gYW5nbGU7XG5cbiAgICBkeCA9IHggLSBjeDtcbiAgICBkeSA9IHkgLSBjeTtcbiAgICBzY2FsZSA9IE1hdGguc3FydChkeCAqIGR4ICsgZHkgKiBkeSkgLyAxMDA7XG5cbiAgICB0aGlzLnRlc3RlbnRpdHkuc2NhbGUueCA9IHNjYWxlICogMC42O1xuICAgIHRoaXMudGVzdGVudGl0eS5zY2FsZS55ID0gc2NhbGUgKiAwLjY7XG4gIH0sXG5cbiAgb25JbnB1dERvd246IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmdhbWUuc3RhdGUuc3RhcnQoJ01lbnUnKTtcbiAgfVxufTtcbiIsInZhciBNZW51ID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLnRleHQgPSBudWxsO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBNZW51O1xuXG5NZW51LnByb3RvdHlwZSA9IHtcblxuICBjcmVhdGU6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgeCA9IHRoaXMuZ2FtZS53aWR0aCAvIDI7XG4gICAgdmFyIHkgPSB0aGlzLmdhbWUuaGVpZ2h0IC8gMjtcblxuICAgIHZhciBzdHlsZSA9IHsgZm9udDogXCI2NXB4IEFyaWFsXCIsIGZpbGw6IFwiI2ZmZmZmZlwiLCBhbGlnbjogXCJjZW50ZXJcIiB9O1xuXG4gICAgdGhpcy50ZXh0ID0gdGhpcy5hZGQudGV4dCh4IC0gMzAwLCB5IC0gMjAwLCBcIlByZXNzIHRvIFN0YXJ0XCIsIHN0eWxlKTtcblxuICAgIHRoaXMuaW5wdXQub25Eb3duLmFkZCh0aGlzLm9uRG93biwgdGhpcyk7XG4gIH0sXG5cbiAgdXBkYXRlOiBmdW5jdGlvbiAoKSB7XG4gIH0sXG5cbiAgb25Eb3duOiBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5nYW1lLnN0YXRlLnN0YXJ0KHBsYXllclN0YXRlLmN1cnJlbnRMZXZlbCk7XG4gIH1cbn07XG4iLCJ2YXIgUHJlbG9hZGVyID0gZnVuY3Rpb24gKGdhbWUpIHtcbiAgdGhpcy5hc3NldCA9IG51bGw7XG4gIHRoaXMucmVhZHkgPSBmYWxzZTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUHJlbG9hZGVyO1xuXG5QcmVsb2FkZXIucHJvdG90eXBlID0ge1xuXG4gIHByZWxvYWQ6IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmFzc2V0ID0gdGhpcy5hZGQuc3ByaXRlKDMyMCwgMjQwLCAncHJlbG9hZGVyJyk7XG4gICAgdGhpcy5hc3NldC5hbmNob3Iuc2V0VG8oMC41LCAwLjUpO1xuXG4gICAgdGhpcy5sb2FkLm9uTG9hZENvbXBsZXRlLmFkZE9uY2UodGhpcy5vbkxvYWRDb21wbGV0ZSwgdGhpcyk7XG4gICAgdGhpcy5sb2FkLnNldFByZWxvYWRTcHJpdGUodGhpcy5hc3NldCk7XG4gICAgdGhpcy5sb2FkLmltYWdlKCd0ZXN0c3ByaXRlJywgJ2Fzc2V0cy90ZXN0LnBuZycpO1xuICAgIHRoaXMubG9hZC5pbWFnZSgnaGFwcHktbWFuJywgJ2Fzc2V0cy9oYXBweS1tYW4ucG5nJyk7XG4gICAgdGhpcy5sb2FkLnRpbGVtYXAoJ2JsdWVfcm9vbScsICdhc3NldHMvdGlsZW1hcHMvYmx1ZV9yb29tLmpzb24nLCBudWxsLCBQaGFzZXIuVGlsZW1hcC5USUxFRF9KU09OKTtcbiAgICB0aGlzLmxvYWQudGlsZW1hcCgncmVkX3Jvb20nLCAnYXNzZXRzL3RpbGVtYXBzL3JlZF9yb29tLmpzb24nLCBudWxsLCBQaGFzZXIuVGlsZW1hcC5USUxFRF9KU09OKTtcbiAgICB0aGlzLmxvYWQuaW1hZ2UoJ2JsdWVfcm9vbScsICdhc3NldHMvdGVzdF9iZ19ibHVlLmpwZycpO1xuICAgIHRoaXMubG9hZC5pbWFnZSgncmVkX3Jvb20nLCAnYXNzZXRzL3Rlc3RfYmdfcmVkLmpwZycpO1xuICB9LFxuXG4gIGNyZWF0ZTogZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuYXNzZXQuY3JvcEVuYWJsZWQgPSBmYWxzZTtcbiAgfSxcblxuICB1cGRhdGU6IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoISF0aGlzLnJlYWR5KSB7XG4gICAgICB0aGlzLmdhbWUuc3RhdGUuc3RhcnQoJ01lbnUnKTtcbiAgICB9XG4gIH0sXG5cbiAgb25Mb2FkQ29tcGxldGU6IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLnJlYWR5ID0gdHJ1ZTtcbiAgfVxufTtcbiIsInZhciBQbGF5ZXIgPSByZXF1aXJlKCcuLi9lbnRpdGllcy9wbGF5ZXInKTtcbnZhciBDbGlja2FibGVQb2x5Z29uID0gcmVxdWlyZSgnLi4vZW50aXRpZXMvY2xpY2thYmxlX3BvbHlnb24nKTtcblxudmFyIFJlZFJvb20gPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMucGxheWVyID0gbnVsbDtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVkUm9vbTtcblxuUmVkUm9vbS5wcm90b3R5cGUgPSB7XG5cbiAgY3JlYXRlOiBmdW5jdGlvbiAoKSB7XG5cdFx0cGxheWVyU3RhdGUuY3VycmVudExldmVsID0gJ1JlZFJvb20nO1xuXG5cdFx0dmFyIGJnID0gdGhpcy5nYW1lLmFkZC5pbWFnZSgwLCAwLCAncmVkX3Jvb20nKTtcblxuICAgIHZhciBtYXAgPSB0aGlzLmdhbWUuYWRkLnRpbGVtYXAoJ3JlZF9yb29tJyk7XG5cdFx0dGhpcy5wb2x5Z29ucyA9IGV4dHJhY3RQb2x5Z29uc0Zyb21UaWxlTWFwTGF5ZXIobWFwLm9iamVjdHMucG9seWdvbnMpO1xuXG4gICAgdmFyIHggPSAodGhpcy5nYW1lLndpZHRoIC8gMik7XG4gICAgdmFyIHkgPSAodGhpcy5nYW1lLmhlaWdodCAvIDIpICsgMjUwO1xuXG4gICAgdGhpcy5wbGF5ZXIgPSBuZXcgUGxheWVyKHRoaXMuZ2FtZSwgeCwgeSk7XG5cbiAgICB0aGlzLmlucHV0Lm9uRG93bi5hZGQodGhpcy5vbklucHV0RG93biwgdGhpcyk7XG4gIH0sXG5cbiAgdXBkYXRlOiBmdW5jdGlvbiAoKSB7XG4gIH0sXG5cbiAgb25JbnB1dERvd246IGZ1bmN0aW9uIChjdXJzb3IpIHtcblx0XHR2YXIgeCA9IGN1cnNvci54LFxuXHRcdFx0IHkgPSBjdXJzb3IueTtcblx0XHRmb3IoaSBpbiB0aGlzLnBvbHlnb25zKSB7XG5cdFx0XHR2YXIgcG9seWdvbiA9IHRoaXMucG9seWdvbnNbaV07XG5cdFx0XHRpZihwb2x5Z29uLmluY2x1ZGVzUG9pbnQoeCwgeSkpIHtcblx0XHRcdFx0aWYocG9seWdvbi5uYW1lID09ICdmbG9vcicpIHtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcy5wbGF5ZXIubW92ZVRvKHgsIHkpO1x0XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYocG9seWdvbi5uYW1lID09ICdkb29yJykge1xuXHRcdFx0XHRcdHJldHVybiB0aGlzLnBsYXllci5tb3ZlVG8oeCwgdGhpcy5wbGF5ZXIueSwgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHR0aGlzLmdhbWUuc3RhdGUuc3RhcnQoJ0JsdWVSb29tJyk7XG5cdFx0XHRcdFx0fSk7XHRcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cbiAgfVxufTtcblxuXG52YXIgZXh0cmFjdFBvbHlnb25zRnJvbVRpbGVNYXBMYXllciA9IGZ1bmN0aW9uKGxheWVyKSB7XG5cdHZhciBwb2x5cyA9IFtdO1xuXHRmb3IoaSBpbiBsYXllcikge1xuXHRcdHBvbHlzLnB1c2gobmV3IENsaWNrYWJsZVBvbHlnb24obGF5ZXJbaV0pKTtcblx0fVxuXHRyZXR1cm4gcG9seXM7XG59O1xuIiwidmFyIFNwbGFzaCA9IGZ1bmN0aW9uICgpIHtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gU3BsYXNoO1xuXG5TcGxhc2gucHJvdG90eXBlID0ge1xuICBjcmVhdGU6IGZ1bmN0aW9uICgpIHtcbiAgfVxufTsiLCJ2YXIgVXRpbHMgPSB7XG4gICAgY29udGFpbnNPYmplY3Q6IGZ1bmN0aW9uKG9iaiwgbGlzdCkge1xuICAgICAgICB2YXIgaTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChsaXN0W2ldID09PSBvYmopIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9LFxuXG4gICAgbG9jYWxTdG9yYWdlU3VwcG9ydGVkOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiAnbG9jYWxTdG9yYWdlJyBpbiB3aW5kb3cgJiYgd2luZG93Wydsb2NhbFN0b3JhZ2UnXSAhPT0gbnVsbDtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIGdlbmVyYXRlVVVJRDogZnVuY3Rpb24oKXtcbiAgICAgICAgdmFyIGQgPSBEYXRlLm5vdygpO1xuICAgICAgICB2YXIgdXVpZCA9ICd4eHh4eHh4eC14eHh4LTR4eHgteXh4eC14eHh4eHh4eHh4eHgnLnJlcGxhY2UoL1t4eV0vZywgZnVuY3Rpb24oYykge1xuICAgICAgICAgICAgdmFyIHIgPSAoZCArIE1hdGgucmFuZG9tKCkqMTYpJTE2IHwgMDtcbiAgICAgICAgICAgIGQgPSBNYXRoLmZsb29yKGQvMTYpO1xuICAgICAgICAgICAgcmV0dXJuIChjPT0neCcgPyByIDogKHImMHg3fDB4OCkpLnRvU3RyaW5nKDE2KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB1dWlkO1xuICAgIH0sXG5cbiAgICBnZXRPYmplY3Q6IGZ1bmN0aW9uKGtleSwgdmFsdWUpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oa2V5KTtcbiAgICAgICAgcmV0dXJuIHZhbHVlICYmIEpTT04ucGFyc2UodmFsdWUpO1xuICAgIH0sXG5cbiAgICBzZXRPYmplY3Q6IGZ1bmN0aW9uKGtleSwgdmFsdWUpIHtcbiAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oa2V5LCBKU09OLnN0cmluZ2lmeSh2YWx1ZSkpO1xuICAgIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gVXRpbHM7Il19
