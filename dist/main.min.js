(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
module.exports = function (point, vs) {
    // ray-casting algorithm based on
    // http://www.ecse.rpi.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html
    
    var x = point[0], y = point[1];
    
    var inside = false;
    for (var i = 0, j = vs.length - 1; i < vs.length; j = i++) {
        var xi = vs[i][0], yi = vs[i][1];
        var xj = vs[j][0], yj = vs[j][1];
        
        var intersect = ((yi > y) != (yj > y))
            && (x < (xj - xi) * (y - yi) / (yj - yi) + xi);
        if (intersect) inside = !inside;
    }
    
    return inside;
};

},{}],2:[function(require,module,exports){
//This is for making useful objects out of tiled objects

var Polygon = require('./polygon');
var Utils = require('../utils');

var Clickable = function(tiledObj) {
    this.name = tiledObj.name;

    if(tiledObj.polygon) { Polygon.call(this, tiledObj) }

    Utils.extend(this, tiledObj.properties);
}

Clickable.prototype.click = function(cursor, state) {
    try {
        this.onClick(cursor, state);
    } catch(err) {
        console.log(this.name, 'onClick');
    }
};

Clickable.prototype.onClick = function(options) {
    throw 'not implemented'
};

module.exports = Clickable;

},{"../utils":17,"./polygon":7}],3:[function(require,module,exports){
//This serves as a registry so the game_screen can automatically make objects
//out of what it finds in the Tiled maps.

var clickables = {
    door: require('./door'),
    floor: require('./floor'),
};

module.exports.create = function(tiledObj) {
    try {
        if(clickables[tiledObj.name]) {
            return new clickables[tiledObj.name](tiledObj);
        } else {
            throw 'clickable undefined';
        }
    } catch(err) {
        console.log(err + ': ', tiledObj.name);
        return undefined;
    }
};

},{"./door":4,"./floor":5}],4:[function(require,module,exports){
Clickable = require('./clickable');

Door = function(tiledObj) {
    Clickable.call(this, tiledObj);
}
Door.prototype = Object.create(Clickable.prototype);

Door.prototype.onClick = function(cursor, state) {
    var target = state.points[this.target];
    state.player.moveTo(target.x, target.y, function() {
        if(target.properties.nextSpawnPoint) {
            playerState.spawnPoint = target.properties.nextSpawnPoint;
        }
        state.game.state.start(target.properties.destination);
    });	
}

module.exports = Door;

},{"./clickable":2}],5:[function(require,module,exports){
Clickable = require('./clickable');

Floor = function(tiledObj) {
    Clickable.call(this, tiledObj);
}
Floor.prototype = Object.create(Clickable.prototype);

Floor.prototype.onClick = function(cursor, state) {
    state.player.moveTo(cursor.x, cursor.y);	
}

module.exports = Floor;

},{"./clickable":2}],6:[function(require,module,exports){
var Player = function (game, x, y) {
	Phaser.Sprite.call(this, game, x, y, 'happy-man');
	game.add.existing(this);

	this.movement;
	this.anchor.setTo(0.5, 0.95);
		
};

Player.prototype = Object.create(Phaser.Sprite.prototype);
Player.prototype.constructor = Player;

/**
 * Automatically called by World.update
 */
Player.prototype.update = function() {
};

Player.prototype.moveTo = function(x, y, done) {
	if (this.movement && this.movement.isRunning) {
		this.movement.stop();
	}

	var duration = (this.game.physics.arcade.distanceToXY(this, x, y) / 300) * 1000;
	this.movement = this.game.add.tween(this)
		.to({ x: x, y: y }, duration, Phaser.Easing.Linear.None, true);
	if(done) {
		this.movement.onComplete.add(done, this);
	}
};

module.exports = Player;

},{}],7:[function(require,module,exports){
//This is a mixin for making useful objects from tiled polygons

var inside = require('point-in-polygon');

Polygon = function(tiledObj) {
    //The polygon is stored with the first point at 0,0 so we have to position it
    this.polygon = translate(tiledObj.x, tiledObj.y, tiledObj.polygon);
    this.includesPoint = function(x, y) {
        return inside([x, y], this.polygon);
    };
};

var translate = function(x, y, polygon) {
    var poly = polygon.slice(0);
	for(i in poly) {
		var vertex = poly[i];
		vertex[0] += x;
		vertex[1] += y;
	};
    return poly;
};

module.exports = Polygon;

},{"point-in-polygon":1}],8:[function(require,module,exports){
'use strict';

var game = new Phaser.Game(1024, 768, Phaser.AUTO, 'sagdc-game');

window.Utils = require('./utils');
window.playerState = {
    UUID: '',
    inventory: [], // List of Item
    currentlyEquipped: null, // Item
    currentLevel: 'BlueRoom'
}

if (Utils.localStorageSupported()) {
     if (localStorage['playerState'] !== undefined) {
        playerState = Utils.getObject('playerState');
    } else {
        playerState.UUID = Utils.generateUUID();   
        Utils.setObject('playerState', playerState);
    }
} else {
    alert("Local storage not supported - you cannot save!");
}

game.state.add('Boot', require('./states/boot'));
game.state.add('Splash', require('./states/splash'));
game.state.add('Preloader', require('./states/preloader'));
game.state.add('Menu', require('./states/menu'));
game.state.add('Game', require('./states/game'));
game.state.add('BlueRoom', require('./states/blue_test_room'));
game.state.add('RedRoom', require('./states/red_test_room'));

game.state.start('Boot');

},{"./states/blue_test_room":9,"./states/boot":10,"./states/game":11,"./states/menu":13,"./states/preloader":14,"./states/red_test_room":15,"./states/splash":16,"./utils":17}],9:[function(require,module,exports){
var GameScreen = require('../states/game_screen');

var BlueRoom = function() {
  this.map = null;
};

BlueRoom.prototype = new GameScreen();
BlueRoom.prototype.create = function() {
	playerState.currentLevel = 'BlueRoom';

	var bg = this.game.add.image(0, 0, 'blue_room');

	this.map = this.game.add.tilemap('blue_room');
	var mapBg = this.map.createLayer('bg');

	this.initScreen();
};

module.exports = BlueRoom;

},{"../states/game_screen":12}],10:[function(require,module,exports){
var Boot = function () {};

module.exports = Boot;

Boot.prototype = {

  preload: function () {
    this.load.image('preloader', 'assets/preloader.gif');
  },

  create: function () {
    this.game.input.maxPointers = 1;

    if (this.game.device.desktop) {
      this.game.stage.scale.pageAlignHorizontally = true;
    } else {
      this.game.stage.scaleMode = Phaser.StageScaleMode.SHOW_ALL;
      this.game.stage.scale.minWidth =  480;
      this.game.stage.scale.minHeight = 260;
      this.game.stage.scale.maxWidth = 640;
      this.game.stage.scale.maxHeight = 480;
      this.game.stage.scale.forceLandscape = true;
      this.game.stage.scale.pageAlignHorizontally = true;
      this.game.stage.scale.setScreenSize(true);
    }

    this.game.state.start('Preloader');
  }
};

},{}],11:[function(require,module,exports){
var Player = require('../entities/player');

var Game = function () {
  this.testentity = null;
};

module.exports = Game;

Game.prototype = {

  create: function () {
    var x = (this.game.width / 2) - 100;
    var y = (this.game.height / 2) - 50;

    this.testentity = new Player(this.game, x, y);
    this.testentity.anchor.setTo(0.5, 0.5);

    this.input.onDown.add(this.onInputDown, this);
  },

  update: function () {
    var x, y, cx, cy, dx, dy, angle, scale;

    x = this.input.position.x;
    y = this.input.position.y;
    cx = this.world.centerX;
    cy = this.world.centerY;

    angle = Math.atan2(y - cy, x - cx) * (180 / Math.PI);
    this.testentity.angle = angle;

    dx = x - cx;
    dy = y - cy;
    scale = Math.sqrt(dx * dx + dy * dy) / 100;

    this.testentity.scale.x = scale * 0.6;
    this.testentity.scale.y = scale * 0.6;
  },

  onInputDown: function () {
    this.game.state.start('Menu');
  }
};

},{"../entities/player":6}],12:[function(require,module,exports){
//main game screen that the various scenes will inherit

var Player = require('../entities/player');
var ClickableMaker = require('../entities/clickable_maker');

var GameScreen = function() {
  this.player = null;
};

GameScreen.prototype = {
  initScreen: function() {
    this.points = extractPointsFromTileMapLayer(this.map.objects.points);
    this.clickables = extractClickablesFromTileMapLayer(this.map.objects.clickables);
    
    if(playerState.spawnPoint && this.points[playerState.spawnPoint]) {
        var point = this.points[playerState.spawnPoint];
        var x = point.x;
        var y = point.y;
    } else {
        var x = (this.game.width / 2);
        var y = (this.game.height / 2) + 250;
    }
    this.player = new Player(this.game, x, y);

    this.input.onDown.add(this.onInputDown, this);
  },

  update: function () {
  },

  onInputDown: function(cursor) {
    for(i in this.clickables) {
        var clickable = this.clickables[i];
        if(clickable.includesPoint(cursor.x, cursor.y)) {
            clickable.click(cursor, this);
        }
    }
  }
};

var extractPointsFromTileMapLayer = function(layer) {
	var points = {};
	for(i in layer) {
        point = layer[i];
		points[point.name] = point;
	}
	return points;
};

var extractClickablesFromTileMapLayer = function(layer) {
	var clickables = {};
	for(i in layer) {
        var clickable = ClickableMaker.create(layer[i]);
		if(clickable) { clickables[clickable.name] = clickable; }
	}
	return clickables;
};

module.exports = GameScreen;

},{"../entities/clickable_maker":3,"../entities/player":6}],13:[function(require,module,exports){
var Menu = function () {
  this.text = null;
};

module.exports = Menu;

Menu.prototype = {

  create: function () {
    var x = this.game.width / 2;
    var y = this.game.height / 2;

    var style = { font: "65px Arial", fill: "#ffffff", align: "center" };

    this.text = this.add.text(x - 300, y - 200, "Press to Start", style);

    this.input.onDown.add(this.onDown, this);
  },

  update: function () {
  },

  onDown: function () {
    this.game.state.start(playerState.currentLevel);
  }
};

},{}],14:[function(require,module,exports){
var Preloader = function (game) {
  this.asset = null;
  this.ready = false;
};

module.exports = Preloader;

Preloader.prototype = {

  preload: function () {
    this.asset = this.add.sprite(320, 240, 'preloader');
    this.asset.anchor.setTo(0.5, 0.5);

    this.load.onLoadComplete.addOnce(this.onLoadComplete, this);
    this.load.setPreloadSprite(this.asset);
    this.load.image('testsprite', 'assets/test.png');
    this.load.image('happy-man', 'assets/happy-man.png');
    this.load.tilemap('blue_room', 'assets/tilemaps/blue_room.json', null, Phaser.Tilemap.TILED_JSON);
    this.load.tilemap('red_room', 'assets/tilemaps/red_room.json', null, Phaser.Tilemap.TILED_JSON);
    this.load.image('blue_room', 'assets/test_bg_blue.jpg');
    this.load.image('red_room', 'assets/test_bg_red.jpg');
  },

  create: function () {
    this.asset.cropEnabled = false;
  },

  update: function () {
    if (!!this.ready) {
      this.game.state.start('Menu');
    }
  },

  onLoadComplete: function () {
    this.ready = true;
  }
};

},{}],15:[function(require,module,exports){
var GameScreen = require('../states/game_screen');

var RedRoom = function() {
	this.map = null;
};

RedRoom.prototype = new GameScreen();
RedRoom.prototype.create = function() {
	playerState.currentLevel = 'RedRoom';

	var bg = this.game.add.image(0, 0, 'red_room');

	this.map = this.game.add.tilemap('red_room');

	this.initScreen();
};

module.exports = RedRoom;

},{"../states/game_screen":12}],16:[function(require,module,exports){
var Splash = function () {
};

module.exports = Splash;

Splash.prototype = {
  create: function () {
  }
};
},{}],17:[function(require,module,exports){
var Utils = {
    containsObject: function(obj, list) {
        var i;
        for (i = 0; i < list.length; i++) {
            if (list[i] === obj) {
                return true;
            }
        }

        return false;
    },

    localStorageSupported: function() {
        try {
            return 'localStorage' in window && window['localStorage'] !== null;
        } catch (e) {
            return false;
        }
    },

    generateUUID: function(){
        var d = Date.now();
        var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
            var r = (d + Math.random()*16)%16 | 0;
            d = Math.floor(d/16);
            return (c=='x' ? r : (r&0x7|0x8)).toString(16);
        });
        return uuid;
    },

    getObject: function(key, value) {
        var value = localStorage.getItem(key);
        return value && JSON.parse(value);
    },

    setObject: function(key, value) {
        localStorage.setItem(key, JSON.stringify(value));
    },

    extend: function (target, other) {
      for (var prop in other) {
        if (typeof other[prop] === 'object') {
          target[prop] = extend(target[prop], other[prop]);
        } else {
          target[prop] = other[prop];
        }
      }
      return target;
    }
};

module.exports = Utils;

},{}]},{},[8])
//# sourceMappingURL=data:application/json;base64,
